w b e ge W B E gE j k h l H M L zt zz zb gg G 2G $ 0 ^ gj gk gh gl gm
r R gr gR
    
C S c s I i a A o O x X
y d c > < gu gU g~ =
. @: @@
C-d tab/shift-tab or C-n/C-p
u U C-r
J K
f F t T ; ,
/ * g* ? # g# n N /e
% . 0 G 
l w s p iw aw
ysiw" cs"' ds"
[space ]space
normal: C-a C-x
insert: C-w C-h C-u C-k C-rregister C-r=operation
visual: v C-v V gv C-g
ex: C-rC-w C-rC-a
q: q/ q? C-f
:rangedelete register
:rangeyank register
:rangemove address, m
:rangecopy address; t
:addressput register
:rangejoin
:rangenormal command
:rangesubstitute/pattern/replace/flags
:rangeglobal/pattern/command
:w :q :wa :qa :read :tabnew
C-rregister
C-o C-i
:read :write :edit :cq :saveas :update
n1,n2bd or bd n1 n2 n3
:buffer number or name
:bnext :bprevious :next :previous
[a ]a [A ]A [b ]b [q ]q [l ]l [t ]t
:close :only
:C-w{j,k,h,l,w} :C-w{+,-,<,>} :sp :vsp :e C-w{t,T,H,L,J,K}
gf
:args `cmd`
C-^ to move between current buffer and alternate buffer
:tabnew :tabedit C-wT :tabclose :tabonly gt gT Ngt :tabnext :tabprevious
:lcd :windo lcd set path+= %:h %% find
( ) sentence
{ } paragraph
C-] C-t
gf
mmark `` `. `^ C-o C-i g; g, gi
:jumps :changes :args :tags :registers
yank register is 0
x,s,c,d,y copies text to unnamed register "
clipboard can be used using + or * registers
_ is called black hole register which means we can use it to delete text but not overwrite the unnamed register. Example, "_diw
"register{y,d,p} to use specific register; otherwise it uses the default which is the unnamed register
named registers are a-z
"%: name of current file
"/:last search pattern
"#: name of the alternate file
":: last ex command
".: last inserted text
visually selecting text and past the prevously yanked text will copy the changed text to the unnamed register

\c \C ignorecase smartcase
\v for regex and close to POSIX
\V for literal search
boundaries are specified using <> or \zs and \ze. * & # respect boundaries but g* & g# don't
hlsearch to highlight search. Turn it off with nohlsearch
n/N next match and gn/gN for character-wise visual search and select next match; useful to combine it with normal command that applies change on next match
* & # can be used to search for the current visual selection
:s/pattern/replacement/flags. flags: g, gc, gn
we can use C-rregister to paster pattern or \=@register
& repeat previous flags
:&& repeat both last substitute and last flags
:rangeglobal/pattern/excmd :rangevglobal/pattern/excmd :rangeg/re/p The default range is the whole file
:ctags -R :tags :tprevious :tnext :tfirst :tlast :tag :tselect :tag /pattern or keyword :tjump /pattern or keyword C-] gC-] C-t :set tags?
:copen :cclose :cnewer :colder :cprevious :cnext :cfirst :clast :cfdo :cdo :cc N :cnfile :cpfile
:lopen :lclose :lnewer :lolder :lprevious :lnext :lfirst :llast :lfdo :ldo :ll N :lnfile :lpfile
:args pattern :argdo :argadd :argdelete :args :argedit
:grep grpprg grpformat :vimgrep /pattern/flag{g} files/buffers
## stands for arglisr
C-n C-xC-n C-xC-k C-xC-f C-xC-l C-xC-o C-xC-] C-xC-i :set complete?
]s [s z= zg zw zug :set spell :set spelllang :set spellfile C-xC-s we can use number before z=/zg/zw/zug to specify which word list dictionary to use; example, 1z= for default vim list or 2z= for second dictionary
Macros: 
    - qregister to save commands after that then q to stop recording
    - @register to replay the macro and then @@ to replay the last played macro
    - if register is small letter then it overwrites it. If it is capital letter then append commands to it. Therefore, we can clear the register a by qaq which basically doesn't record anything but clear it
    - If macro get error while executing, it aborts
    - playing macro can be in series or in parallel
        - Series: number@register which would play the command number times. It stops when it encounter errors. The number can be much higher than the instances that are available to play the macro on  and it is okay because once it gets error it aborts when nothing is there to play the macro on
        - Parallel: use ex command to run the macro. macro runs on each line independently and if error is encountered on lone line it does not affect the other lines.
:wnext is the same as :write | next


# Tags
ctags -R; set tags
tag tjump tselect C-] gC-] C-t tfirst tlast tnext tprevious

# Quickfix list
copen cclose cdo cfdo cfirst cnext cprevious clast cc N cnfile cpfile colder cnewer

# AutoCompletion
C-n
C-x: C-n, C-i, C-k, C-o, C-], C-f
C-n C-p C-y C-e
set: complete

# Spell checker
]s [s z= zg zw zug C-xs
set: spell spelllang
spell directory under .vim







#################################################################################
- vim -u NONE -N
- Navigate: gg G zz zt zb F B C-u C-d H M L NG C-n C-p Tab Shift-tab C-d C-f C-b C-e C-y g_ N% [( [) [{ [} %
- Operators: c d y > < gu gU g~ = !
- Operator + motion Or operator + text-object
- repeat operator to act on the current line
- objects: (i|a|)w/s/p/t
- x X p P o O C S I A i a 0 ^
- search: * # / ? n N f F t T ; , :s/pattern/replacement/{g,n,c}, K, q:, q/
- Repeat: ; , . N n @: @q @@ &
- Line Addresses: 0 1 $ . %
- Undo: u C-r U
- Commenting: gc
- Normal: NC-x NC-a
- Visual: v V C-v gv, visual selection + operator, v/V/V-v + motion, U u
- Insert: i I C s S C-r{register} C-o{normal cmd} C-r{=expression} C-h C-w C-u, r R gR
- Command Line:
    - [range]delete {register}
    - [range]yank {register}
    - [line]put {register}
    - [range]copy {address}
    - [range]move {address}
    - [range]join
    - [range]normal cmd
    - [range]s/pattern/replacement
    - [range]global/pattern/cmd
    - <C-r><C-w>
    - <C-r><C-a>
    - [range]write !program
    - [range]write! filename
    - [range]read !program
    - [range]read! program
    - !shell or !shellcmd
    - [range]!filter to filter lines using external program

- Manage files:
    - e sp vsp close only q qa w wa e! x ZZ
    - %a active
    - # alternative, C-^ to toggle between active and alternative
    - #h for hidden files, files that were modified but not saved
    - bn bp bfirst blast
        - Use [b ]b [B ]B [a ]a [q ]q [c ]c [t ]t [l ]l
    - bd N1 N2 ..., N,M bd
    - args {arglist} Or args cmd Or args glob or vim *.txt

- Delete/Yank/Put:
    - By default, x/s/c/d/y all set the contents of the unnamed register `"`
    - Yank also sets the `0` register also
    - `_` is black hole register that we can use to digard deleted contents
    - [a-z] named registers. If we use the upper case letters, it appends the contents; otherwise, it would overwrite the contents
    - `"{register}y/d` would yank/delete the text and put the contents in {register}
    - To copy/paste using system clipboard, we can use "+" or "*" registers. Example, `"+y` to copy and `"+p` to paste from clipboard
    - gp or gP would paste and put the curser at the end of the pasted text
    - We can use C-r{register} to paste contents from register while in insert mode
    - Some common registers are "/, ":, "#, "%, ".
    - when pasting, it makes sure to autoindent if we have autoindent set
    - when pasting, Vim behaves differently if it is a character or line text

- Patterns:
    - \v for regex and \V for literal search
    - smartcase option is probably the best
    - \cpattern to ignore case and \Cpattern to have case sensitivity
    - */# search for the current word under the cursor
    - g*/g# search perform same search as */# but w/o the word delimiters
    - \zs marks the beginning of subpattern and \ze marks the end of the subpattern within larger pattern that we're interested in. Example, Practical \zsVim\ze

- Search:
    - / or ? or /pattern/e to place the cursor at the end of the pattern
    - n or N
    - gn or gN to to next/previouse match and visually mark match until the end
    - :s/pattern//gn count matched pattern
    - \1 first submatch, \2 second submatch, ... \0 the entire matched pattern
    - ~ insert string from previous substitute
    - & insert flages from previous substitute
    - gc flag to eyeball each match before substitution
    - C-r{register} to use contents from register in the search/substitute commands. Example, /C-r0
    - :& would repeat the last substitute command but w/o the flags
    - :&& would repeat the last substitute command with the flags. We can use g&
    - :vimgrep /pattern/ files or glob to search for matches project-wide
        - This will populate the quickfix list
        - We can use :cfdo %s//replacement/g to replace all matches. :cfdo update will save all changes
    
- Global:
    - :[range]global/patter/cmd
    - The default range is the whole file
    - The default cmd is print
    - vglobal is the inverse of global where it applies the command on the lines that don't match
    - Example, :g/TODO/t$ to copy all lines that have TODO pattern to the end of the file

- ctags:
    - Allows us to jump to keywords and defintions
    - C-] or gC-]
    - :tn/tp/tf/tl
    - :tag keyword or :tag to advance through list

-  Quickfix list
    - This list is populated when we run :make, :grep, and :vimgrep
    - There can only be ONE quickfix list available globally in any Vim instance.  If we run :make then :vimgrep, the contents from :vimgrep would  overwrite the contents from :make
    -  The location list fixes the above issue by using :lgrep, :lmake, and :lvimgrep. Each buffere/file/tab will have its own location list and activated based on the active window
    - :copen/cclose/cn/cp/cf/cl/cnfile/cpfile/cc N/cdo cmd/cfdo cmd
    - :lopen/lclose/ln/lp/lf/ll/lnfile/lpfile/ll N/ldo cmd/lfdo cmd
    - cdo will execute the cmd on every line for the files in the quickfix list
    - cfdo will execute the cmd on every file in the quickfix list
    - We can pull older  quickfix list using :colder and newer quickfix list using :cnewer. This  would allow us to navigate between different quickfix  lists that was generated  previously and toggle between them and the new ones

- Compiler:
    - We can customize the external compiler using makeprg and errorformat
    - We  can have :make invoke other programs such as linters, syntax checkers, and test suites
    -  “In Vim’s terminology, a compiler is any external program that does something with our document and produces a list of errors or warnings. The :make command simply invokes the external compiler and then parses the output to construct a navigable quickfix list from them.”
    - :compiler name_of_program is a shortcut to set errorformat and makeprg using name_of_program. Example, :compiler pylist

- Grep:
    - Vim adds -n when we execute :grep
    - By default Vim runs grep in the shell and process the output and populate quickfix list
    - We can customizer which program to run when we call :grep using grepprg
    - We can also customize the format of the returned results using grepformat
    - :vimgrep /pattern/ files uses Vim's internal search engine
    - % current directory, %% current file, ## args list

- Autocompletion:
    - C-n will bring a list of suggestions from the buffer list, includes, and tags. We can set what to use using `complete` setting
    - C-n/C-p to move forward/backward through the suggestions
    - C-nC-p is a nice trick to pull up suggestions without selecting any word coz C-n selects the first word that pops up
    - C-y or CR to select the word
    - C-e to revert back to the original text w/o using any of the suggestions
    - C-xC-k dictionary lookup. We can either use Vim's built-in spell checker using :set spell OR supply dictionary
    - C-xC-l for whole line completion. Just start with first few letters and trigger it to get line autocompletion suggestion
    - C-xC-f file names completio. It uses the current working directory as the source for the file name suggestions
    - C-xC-n keywords from current buffer
    - C-xC-i Include file keywords
    - C-xC-o Omni completion. Similar to intellisense where the autocompletion is tailored to the context of where the cursor is
    - C-xC-]
    - We can use C-xC-n repeatedly insert sequence of words and Vim remembers the context of where the autocompletion was triggered. This can also be used with line autocompletion

Spell checker:
    - We can enable it using :set spell
    - [s/]s to jump forward/backward between flagged words
    - z= to ask Vim for a list of suggestions to fix the error when we are on the flagged word
    - zg to add the current word to the dictionary
    - zw to add the remove word to the dictionary
    - zug to revert zg or zw
    - We can sue :set spelllang to set the dictionary such as en_us
    - We can use spellfile setting to add files to the dictionary list
    - C-xC-s to triggers correction suggestions from Insert mode

Settings:
    - setlocal applies things to active window
    - append ! to revert the setting
    - append & to reset the setting
    - append ? to print the current settings
    - $MYVIMRC is the path for the vimrc
    - We can use `source` to source any file/config
    - `autocmd` tells Vim to listen to events and execute the command if it evaluates to true.
        - `autocmd FileType python compiler pylint` tells Vim when it detects that the type of the file is Python then set compiler to pylint

- Opening Vim:
    - vim file +line_number Or +/search-pattern OR +?search-pattern
